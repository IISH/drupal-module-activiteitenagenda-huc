<?php

module_load_include('inc', 'iishagenda', 'iishagenda.form');
module_load_include('inc', 'iishagenda', 'iishagenda.ics');
module_load_include('inc', 'iishagenda', 'iishagenda.view');

/**
 * Implementation of hook_init().
 */
function iishagenda_init()
{

  switch (arg(0)) {
    case "catering":
      drupal_add_js(drupal_get_path('module', 'iishagenda') . '/js/iishagenda.js');
      break;
    case "catering-archive":
      drupal_add_js(drupal_get_path('module', 'iishagenda') . '/js/iishagenda.js');
      break;
    case "node":
      drupal_add_js(drupal_get_path('module', 'iishagenda') . '/vendor/jquery_timepicker/jquery.timepicker.js');
      drupal_add_js(drupal_get_path('module', 'iishagenda') . '/js/iishagenda_eventform.js');
      drupal_add_css(drupal_get_path('module', 'iishagenda') . '/vendor/jquery_timepicker/jquery.timepicker.css', array('weight' => 998));
      drupal_add_js(array('most_used_duration' => variable_get('most_used_duration', 60)), 'setting');
      break;

    case "calendar":
    case "calendar-flex":
      drupal_add_css(drupal_get_path('module', 'iishagenda') . '/css/calendar.css', array('weight' => 999));
      break;

    case "field-collection":
      if (arg(1) == "field-catering") {
        drupal_add_js(drupal_get_path('module', 'iishagenda') . '/vendor/jquery_timepicker/jquery.timepicker.js');
        drupal_add_js(drupal_get_path('module', 'iishagenda') . '/js/iishagenda_eventform.js');
        drupal_add_css(drupal_get_path('module', 'iishagenda') . '/vendor/jquery_timepicker/jquery.timepicker.css', array('weight' => 998));
      }
      break;
  }

  _iishagenda_determine_location();

  drupal_add_css(drupal_get_path('module', 'iishagenda') . '/css/agenda.css', array('weight' => 999, 'group' => CSS_THEME));
}


/**
 * Implements hook_views_api().
 *
 * Enabling using templates inside module
 */
function iishagenda_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'iishagenda'),
    'template path' => drupal_get_path('module', 'iishagenda'),
  );
}

/**
 * Implements hook_block_info().
 */
function iishagenda_block_info()
{

  $blocks['location_menu'] = array(
    'info' => t('Location Menu'),
  );

  $blocks['user_hello'] = array(
    'info' => t('User Hello'),
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function iishagenda_block_view($delta)
{
  $block = array();

  if ($delta == 'location_menu') {

    $allowed_views = array('calendar', 'catering', 'catering_archive');
    $view = views_get_page_view();

    if (isset($view) &&
      (in_array($view->name, $allowed_views) || ($view->name == 'upcoming_events' && $view->current_display == 'page'))) {
      $block['subject'] = t('Locaties');
      $block['content'] = _iishagenda_build_location_menu();
    }
  }

  return $block;
}

/**
 * Creates welcome message and links output for block
 */
function _iishagenda_user_welcome()
{
  global $user;
  $user = user_load($user->uid);
  $output = t('Welkom :username', array(":username" => $user->name));
  $output .= "<br>" . l("Uitloggen", "/user/logout");

  return array('#markup' => $output);
}

/**
 * Creates an menu for locations and returns output for block
 */
function _iishagenda_build_location_menu()
{

  $path = drupal_get_path_alias();
  $location_voc = taxonomy_vocabulary_machine_name_load('room_location');
  $terms = taxonomy_get_tree($location_voc->vid, 0, null, true);

  $items = array();
  if (is_array($terms)) {
    foreach ($terms as $term) {
      if ($term->tid == $_SESSION['location_id']) {
        $items[] = '<span class="active-location">'.t(':location_name', array(':location_name' => $term->name)).'</span>';
      } else {
        $items[] = l($term->name, $path, array('query' => array('location_id' => $term->tid)));
      }
    }
  }
  $output = t('Kies een locatie waarvan je de reserveringen wilt zien.');
  $output .= theme_item_list(array("title" => '', "items" => $items, 'type' => 'ul', 'attributes' => array()));

  return array('#markup' => $output);
}

/**
 *
 * Implements hook_menu_alter.
 *
 * Forces admins to use the same theme default as normal users
 */
function iishagenda_menu_alter(&$items)
{
  $items['node/add/event']['theme callback'] = 'iishagenda_custom_get_default_theme';
}


/**
 * Implements hook_custom_theme().
 */
function iishagenda_custom_theme()
{

  if (arg(0) == 'node' && arg(2) == 'edit') {
    $n = node_load(arg(1));
    if ($n->type == 'event') {
      return iishagenda_custom_get_default_theme();
    }
  }
}


/**
 * Returns the default theme
 */
function iishagenda_custom_get_default_theme()
{
  return variable_get('theme_default', '0');
}


/**
 * Implements hook_admin_paths_alter().
 *
 * Disables admin overlay for path
 */
function iishagenda_admin_paths_alter(&$paths)
{
  $paths['node/add/event'] = FALSE;
  $paths['node/*/edit'] = FALSE;
}


/**
 * Implementation of hook_menu().
 */
function iishagenda_menu()
{
  $items['admin/config/iishagenda'] = array(
    'title' => t('IISH Agenda'),
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('admin_settings'),
    'access callback' => '_iishagenda_user_has_role',
    'access arguments' => array(array('administrator', 'event administrator')),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'iishagenda.admin.inc',
  );
  $items['ics/%'] = array(
    'title' => t('ICS'),
    'description' => '',
    'page callback' => '_generate_ics',
    'access callback' => '_iishagenda_user_has_role',
    'access arguments' => array(array('authenticated user')),
  );

  $items['admin/config/iishagenda/stat'] = array(
    'title' => t('Statistics'),
    'description' => '',
    'page callback' => '_iish_agenda_statspage',
    'access callback' => '_iishagenda_user_has_role',
    'access arguments' => array(array('administrator', 'event administrator')),
  );

  return $items;
}


function _iish_agenda_statspage()
{
  $output = '';
  $header = array('item', 'aantal');
  $rows = array();

  // total events
  $result = db_select('node', 'n')
    ->condition('n.type', 'event')
    ->fields('n', array('nid', 'title'))
    ->execute();
  $num_of_results = $result->rowCount();
  $rows[] = array('Aantal reserveringen', $num_of_results);

  $most_used = _iishagenda_define_most_used_duration();
  $rows[] = array('Meest gebruikte duur', $most_used . ' minuten');

  $output .= theme('table', array('header' => $header, 'rows' => $rows));

  return $output;
}

function _iishagenda_define_most_used_duration()
{
  // Most used duration
  $query = db_select('node', 'n')
    ->condition('n.type', 'event');
  $query->join('field_data_field_event_date', 'd', 'd.entity_id = n.nid');
  $query->fields('d', array('field_event_date_value', 'field_event_date_value2'));

  $result = $query->execute();
  $durations = array();

  while ($record = $result->fetchAssoc()) {
    $start = $record['field_event_date_value'];
    $end = $record['field_event_date_value2'];
    $date_start = new DateTime($start);
    $date_end = new DateTime($end);

    $interval = $date_start->diff($date_end);
    $minutes = ($interval->i + $interval->h * 60);

    if (isset($durations["" . $minutes])) {
      $durations["" . $minutes] += 1;
    } else {
      $durations["" . $minutes] = 1;
    }
  }

  uasort($durations, 'cmp');
  $keys = array_keys($durations);
  $most_used = $keys[0];
  $duration_int = intval($most_used);
  variable_set('most_used_duration', $duration_int);

  return $duration_int;
}


function cmp($a, $b)
{
  if ($a == $b) {
    return 0;
  }
  return ($a > $b) ? -1 : 1;
}

/**
 * Implements hook_node_view().
 */
function iishagenda_node_view($node, $view_mode, $langcode)
{
  global $user;

  if ($node->type == "event" && $view_mode == "full" && _iishagenda_is_event_controlled($node) && !is_user_admin() && $node->uid == $user->uid) {
    // OUD
////	  $message = t('Je kan dit evenement niet wijzigen omdat het plaatsvind op :location (gecontroleerd beheer), voor wijzigingen neem aub contact op met: ', array(":location"=>_iishagenda_get_location_name_by_event($node)));
////	  $message .= _iishagenda_get_location_admin_by_event($node);
////	  drupal_set_message($message,'warning');
//		// TODOGCU
//		// NIEUW
//	  $message = t('Je reservering is ter goedkeuring doorgestuurd naar de facilitaire dienst van :location. Voor wijzigingen neem aub contact op met: ', array(":location"=>_iishagenda_get_location_name_by_event($node))) ;
//      $message .= _iishagenda_get_location_admin_by_event($node);
//	  drupal_set_message($message);
  }
}


/**
 *  Escapes a string of characters
 */
function escapeString($string)
{
  return preg_replace('/([\,;])/', '\\\$1', $string);
}


/**
 * Checks if current user has a certain role
 */
function _iishagenda_user_has_role($roles = array())
{
  global $user;
  $check = array_intersect($roles, array_values($user->roles));
  return empty($check) ? FALSE : TRUE;
}


/**
 * Implements hook_node_insert()
 */
function iishagenda_node_insert($node)
{
  if ($node->type == 'event') {
    _iishagenda_on_insert_event($node);
  }
}


/**
 * Implementation of hook_node_presave().
 */
function iishagenda_node_presave($node)
{
  global $user;

  if ($node->type == 'event') {

    // if no control, status is approved
    if ($node->is_new && !_iishagenda_is_event_controlled($node)) {
      $node->field_event_status[LANGUAGE_NONE][0]['value'] = 'approved';
    }

    if (issetor($node->field_clone_of[LANGUAGE_NONE], false)) {
      $clone = count($node->field_clone_of[LANGUAGE_NONE]);
    } else {
      $clone = 0;
    }

    // only mail owner if current user is not the owner, and it is not a clone
    if ($user->uid !== $node->uid && $clone == 0) {
      $old_node = node_load($node->vid);
      $current_status = issetor($old_node->field_event_status[LANGUAGE_NONE][0]['value'], false);
      $new_status = issetor($node->field_event_status[LANGUAGE_NONE][0]['value'], false);

      if ($current_status !== $new_status && $new_status == 'approved') {
        _notify_event_owner($node);
      }
    }

    // sort catering items based on time
    if (isset($node->field_catering[LANGUAGE_NONE]) && count($node->field_catering[LANGUAGE_NONE]) > 0) {
      $node->field_catering[LANGUAGE_NONE] = _iishagenda_sort_catering_items($node->field_catering[LANGUAGE_NONE]);
    }
  }
}


/**
 * Sorts catering field collection items based on time
 * @param $items
 * @return array
 */
function _iishagenda_sort_catering_items($items)
{
  $first = current($items);
  // only order when a form is submitted
  if (isset($first['field_catering_time'])) {
    $timeIndexItems = array();
    $i=0;
    foreach ($items as $item) {
      $time = $item['field_catering_time'][LANGUAGE_NONE][0]['value'];
      $time = str_replace(":", "", $time);

      // check if timeslot is empty use it, else extend key to prevent overwriting
      if(!isset($timeIndexItems[$time])){
        $timeIndexItems[$time] = $item;
      }else{
        $index = $time.'_'.$i;
        $timeIndexItems[$index] = $item;
      }
      $i++;
    }
    ksort($timeIndexItems);
    $ordered_items = array_values($timeIndexItems);
    return $ordered_items;
  }
}


function _iishagenda_on_insert_event($node)
{
  global $base_url, $user;

  $event = entity_metadata_wrapper('node', $node);
  $rooms = $event->field_event_room->value();

  if (isset($rooms[0])) {
    $room_wrapper = entity_metadata_wrapper('node', $rooms[0]);
    $location = $room_wrapper->field_room_location->value();
    $location_wrapper = entity_metadata_wrapper('taxonomy_term', $location);
    $booking_control = $location_wrapper->field_booking_control->value();

    if ($booking_control) {
      // ALS BOOKING CONTROL
      if (!is_user_admin()) {
        // ALS INVOERDER GEEN ADMIN, DAN MAILTJE NAAR BOOKING CONTROL
        $subject = "Nieuwe registratie / New registration: " . $node->title;
        $body = array();
        $body[] = "Nieuwe registratie '" . $node->title . "' is geregistreerd en wacht op goedkeuring.";
        $body[] = "Zie: " . $base_url . "/approval-list";
        $body[] = '';
        $body[] = "New registration '" . $node->title . "' is registered and is awaiting approval.";
        $body[] = "See: " . $base_url . "/approval-list";

        $succes_message = t('De locatiebeheerder is op de hoogte gesteld voor goedkeuring.');
        _isshagenda_compose_send_mail($location_wrapper->field_admin_email->value(), $subject, $body, $succes_message);

        // TODOGCU: moet hier niet nog een bericht naar de invoerdder

      }
    } else {

      $mailCorrectlySent = null;

      // notify booking control if event is bigger than 50
      if ($event->field_people->value() > 50) {
        $subject = "Nieuwe registratie / New registration: " . $node->title;
        $body = array();
        $body[] = "Je registratie '" . $node->title . "' is aangemeld met meer dan 50 man.";
        $body[] = "Zie: " . $base_url . "/node/" . $node->nid;
        $body[] = '';
        $body[] = "Your registration '" . $node->title . "' has been registered for more than 50 persons.";
        $body[] = "See: " . $base_url . "/node/" . $node->nid;

        $succes_message = t('De locatiebeheerder is op de hoogte gesteld van je registratie.');
        // TODOGCU
        $mailCorrectlySent = _isshagenda_compose_send_mail($location_wrapper->field_admin_email->value(), $subject, $body, $succes_message);
      }

      // TODOGCU MOET DIT MAILTJE NIET VERHUIZEN ONDER DE IF/ELSE
      // send user a confirmation
      $subject = "Je reservering is aangemaakt / Your registration has been created: " . $node->title;
      $body = array();
      $body[] = "Je reservering '" . $node->title . "' is aangemeld en staat in de Agenda.";
      $body[] = "Zie: " . $base_url . "/node/" . $node->nid;
      $body[] = '';
      $body[] = "Your registration '" . $node->title . "' has been created and can be found in the Agenda.";
      $body[] = "See: " . $base_url . "/node/" . $node->nid;
      // TODOGCU
      _isshagenda_compose_send_mail($user->mail, $subject, $body, false);

      if ($mailCorrectlySent === true) {
        // TODOGCU
        $message = t('Je reservering is ter goedkeuring doorgestuurd naar de facilitaire dienst van :location. Voor wijzigingen neem aub contact op met: ', array(":location" => _iishagenda_get_location_name_by_event($node)));
        $message .= _iishagenda_get_location_admin_by_event($node);
        drupal_set_message($message);
      } elseif ($mailCorrectlySent === false) {
        // TODOGCU
        $message = t('Het is NIET gelukt om je reservering ter goedkeuring door te mailen naar de facilitaire dienst van :location. Neem zelf contact op met: ', array(":location" => _iishagenda_get_location_name_by_event($node)));
        drupal_set_message($message, 'error');
      }

      $path = "/taxonomy/term/" . ($location->tid);
      drupal_set_message(t('Voor (meer) cateringmogelijkheden kijk op onze locatiepagina voor informatie: ') . l($location->name, $path));
    }


  }
}


/**
 * @param $variables
 *
 * Implements hook_preprocess_page
 *
 * Change the name of the even when private
 */
function iishagenda_preprocess_page(&$variables)
{

  if (isset($variables['node']) && $variables['node']->type == 'event') {
    $eventw = entity_metadata_wrapper('node', $variables['node']);
    if ($eventw->field_private->value() == "1") {
      $variables['title'] = 'vergadering';
      drupal_set_title('vergadering', PASS_THROUGH);
    }
  }
}

/**
 * Adds reservation number (node id) and cancelled value to template
 */
function iishagenda_preprocess_node(&$variables, $hook)
{
  if ($variables["type"] == "event") {
    $variables["reservation_number"] = t("Reserveringsnummer: ") . "#" . $variables["nid"];
    if (!empty($variables['field_event_status'][0]['value']) && $variables['field_event_status'][0]['value'] == 'cancelled') {
      $variables["cancelled"] = t("Geannuleerd");
    }

    if (drupal_valid_path('clone/' . $variables['nid'])) {
      $variables["clone"] = true;
    } else {
      $variables["clone"] = false;
    }

    $variables["create_date"] = format_date($variables["created"], 'event_date');
  }
}


/**
 * Check if the event is in a room that is on a controlled location (field_booking_control)
 * @param $event
 * @return bool
 */
function _iishagenda_is_event_controlled($event)
{
  $event = entity_metadata_wrapper('node', $event);
  $rooms = $event->field_event_room->value();

  if (isset($rooms[0])) {
    $room_wrapper = entity_metadata_wrapper('node', $rooms[0]);
    $location = $room_wrapper->field_room_location->value();
    $location_wrapper = entity_metadata_wrapper('taxonomy_term', $location);
    $booking_control = $location_wrapper->field_booking_control->value();
    return $booking_control;

  } else {
    return false;
  }
}


function _isshagenda_compose_send_mail($to, $subject, $body, $successMessage = false)
{
  global $user;

  $module = 'iishagenda';
  $from = variable_get('site_mail', '');
  $language = user_preferred_language($user);

  $params = array(
    'subject' => $subject,
    'body' => $body,
  );

  $result = drupal_mail($module, 'notice', $to, $language, $params, $from);

  if ($successMessage !== false) {
    if ($result["result"]) {
      drupal_set_message($successMessage);
      drupal_set_message('E-mail (' . addslashes($subject) . ') verstuurd naar: ' . $to . ' (Code: 854287)');
    } else {
      drupal_set_message(t('Er is een fout opgetreden. Neem aub contact met ons op, excuses voor het ongemak.'), 'error');
      drupal_set_message('ERROR: E-mail (' . addslashes($subject) . ') NIET verstuurd naar: ' . $to . ' (Code: 745128)', 'error');
    }
  }
//  else{
  if ($result["result"]) {
    return true;
  } else {
    return false;
  }
//  }
}


/**
 * Sendsadmin notification mail
 * (deprecated)
 */
function ___iishagenda_notify_admin($event, $to)
{
  global $base_url;
  global $user;

  $module = 'iishagenda';
  $from = variable_get('site_mail', '');
  $language = user_preferred_language($user);

  $subject = "Nieuwe registratie / New registration: " . $event->title;
  $body = array();
  $body[] = "Je registratie '" . $event->title . "' is geregistreerd en wacht op goedkeuring.";
  $body[] = "Zie: " . $base_url . "/approval-list";
  $body[] = '';
  $body[] = "Your registration '" . $event->title . "' has been registered and is awaiting approval.";
  $body[] = "See: " . $base_url . "/approval-list";

  $params = array(
    'subject' => $subject,
    'body' => $body,
  );

  $result = drupal_mail($module, 'notice', $to, $language, $params, $from);

  if ($result["result"]) {
    drupal_set_message(t('De locatiebeheerder is op de hoogte gesteld voor goedkeuring.'));
    drupal_set_message('E-mail (' . addslashes($subject) . ') verstuurd naar: ' . $to . ' (Code: 795413)');
  } else {
    drupal_set_message(t('De locatiebeheerder is niet op de hoogte gesteld vanwege een fout, neem aub contact op met de beheerder.'), 'error');
    drupal_set_message('ERROR: E-mail (' . addslashes($subject) . ') NIET verstuurd naar: ' . $to . ' (Code: 241963)', 'error');
  }
}


/**
 * Notifies event creator
 */
function _notify_event_owner($node)
{
  global $base_url;

  $user = user_load($node->uid);
  $email = $user->mail;
  $module = 'iishagenda';
  $to = $email;
  $from = variable_get('site_mail', '');
  $language = user_preferred_language($user);

  $subject = t("Je reservering is goedgekeurd / Your reservation has been approved: " . $node->title);
  $body = array();
  $body[] = "Je reservering '" . $node->title . "' is goedgekeurd.";
  $body[] = "Zie: " . $base_url . "/node/" . $node->nid;
  $body[] = '';
  $body[] = "Your reservation '" . $node->title . "' has been approved.";
  $body[] = "See: " . $base_url . "/node/" . $node->nid;

  $params = array(
    'subject' => $subject,
    'body' => $body,
  );

  $result = drupal_mail($module, 'notice', $to, $language, $params, $from);

  if ($result["result"]) {
    drupal_set_message(t('Een bevestiging van de goedkeuring is gestuurd naar de aanvrager: ' . $user->name . ''));
    drupal_set_message('E-mail (' . addslashes($subject) . ') verstuurd naar: ' . $to . ' (Code: 526214)');
  } else {
    drupal_set_message(t('De aanvrager is niet op de hoogte gesteld vanwege een fout, neem aub contact op met de beheerder.'), 'error');
    drupal_set_message('ERROR: E-mail (' . addslashes($subject) . ') NIET verstuurd naar: ' . $to . ' (Code: 845132)', 'error');
  }
}


/**
 * Removes node view and edit tab if the node is an event and the event is on a controlled location, and the user is not an admin
 * Implements hook_menu_local_tasks_alter().
 */
function iishagenda_menu_local_tasks_alter(&$data, $router_item, $root_path)
{
  // For content type, remove the 'edit' & 'view' tab when viewing the node.
  foreach ($router_item['page_arguments'] as $key => $argument) {
    if (is_object($argument) && isset($router_item['page_arguments'][$key]->type) && $router_item['page_arguments'][$key]->type == 'event') {
      if (_iishagenda_is_event_controlled($router_item['page_arguments'][$key]) && !is_user_admin()) {
        foreach ($data['tabs'][0]['output'] as $key => $value) {
          if ($value['#link']['path'] == 'node/%/edit' || 'node/%/view') {
            unset($data['tabs'][0]['output'][$key]);
          }
        }
      }
    }
  }
}

/**
 * Check if the event is private
 * @return bool
 */
function _iishagenda_is_event_private($nid)
{
  $event = node_load($nid);
  $eventw = entity_metadata_wrapper('node', $event);

  if ($eventw->field_private->value() == "1") {
    return TRUE;
  } else {
    return FALSE;
  }
}


/**
 * Denies access to events on a controlled location
 * Implements hook_node_access
 */
function iishagenda_node_access($node, $op, $account)
{
  // We are interested to existing objects. When the node is being created, Drupal passed the node type instead of the node object.
  if (is_object($node)) {
    $bool = (
      ($node->type == 'event') &&
      ($op == 'update')
    );

    if ($bool) {

      if (_iishagenda_is_event_controlled($node) && !is_user_admin()) {
        return NODE_ACCESS_DENY;
      }

    }
  }

  return NODE_ACCESS_IGNORE;
}


function _iishagenda_get_location_name_by_event($event)
{
  $event = entity_metadata_wrapper('node', $event);
  $rooms = $event->field_event_room->value();
  if (isset($rooms[0])) {
    $room_wrapper = entity_metadata_wrapper('node', $rooms[0]);
    $location = $room_wrapper->field_room_location->value();
    return $location->name;
  }
}

function _iishagenda_get_location_admin_by_event($event)
{
  $event = entity_metadata_wrapper('node', $event);
  $rooms = $event->field_event_room->value();
  if (isset($rooms[0])) {
    $room_wrapper = entity_metadata_wrapper('node', $rooms[0]);
    $location = $room_wrapper->field_room_location->value();
    $location_wrapper = entity_metadata_wrapper('taxonomy_term', $location);
    $email = $location_wrapper->field_admin_email->value();
    return l($email, 'mailto:' . $email, array('absolute' => TRUE));
  }
  return '';
}

/**
 * Implementation of hook_mail().
 */
function iishagenda_mail($key, &$message, $params)
{
  switch ($key) {
    case 'notice':
      $message['subject'] = $params["subject"];
      $message['body'] = $params["body"];
      break;
  }
}


/**
 * checks if admin is defined and exists
 *  (deprecated every location has its own admin now)
 */
function ___check_admin()
{
  if (variable_get('iishagenda_admin')) {
    return true;

  } else {
    drupal_set_message(t('No event administrator defined, contact webmaster please.'), 'error');
    return false;
  }
}


/**
 * checks users is admin or event administrator
 */
function is_user_admin()
{
  global $user;
  $roles = array('administrator', 'event administrator');
  if (count(array_intersect($roles, $user->roles)) > 0) {
    return true;
  } else {
    return false;
  }
}


/**
 * checks users is admin or event administrator all rooms
 */
function is_user_event_administrator_all_rooms()
{
  global $user;
  //$roles = array('administrator', 'event administrator', 'event administrator all rooms');
  $roles = array('administrator', 'event administrator all rooms');
  if (count(array_intersect($roles, $user->roles)) > 0) {
    return true;
  } else {
    return false;
  }
}


/**
 * Implementation of hook_cron().
 */
function iishagenda_cron()
{
  global $base_url;

  _iishagenda_define_most_used_duration();

  // send mail only on workdays
  if (date('N') >= 6 || variable_get('huc_agenda_reservering_optie_mail') == date('Y-m-d')) {
    watchdog('iish_agenda', 'HuC Agenda optie SKIPPED ' . date('Y-m-d H:i'), WATCHDOG_NOTICE);
  } else {
    watchdog('iish_agenda', 'HuC Agenda optie RUN ' . date('Y-m-d H:i'), WATCHDOG_NOTICE);

    variable_set('huc_agenda_reservering_optie_mail', date('Y-m-d'));

    // set 10 days
    $time_to_event = 60 * 60 * 24 * 10;
    $datelimit = date('Y-m-dTH:i:s', time() + $time_to_event);

    // start with the base table
    $query = db_select('node', 'n');
    $query->join('users', 'u', 'n.uid = u.uid');
    $query->join('field_data_field_event_option', 'o', 'o.entity_id = n.nid');
    $query->join('field_data_field_event_date', 'd', 'd.entity_id = n.nid');
    $result = $query
      ->fields('n', array('nid', 'title'))
      ->fields('u', array('uid', 'name', 'mail'))
      ->fields('o', array('field_event_option_value'))
      ->fields('d', array('field_event_date_value'))
      ->condition('n.type', 'event')
      ->condition('o.field_event_option_value', '1')
      ->condition('d.field_event_date_value', $datelimit, "<=")
      ->condition('d.field_event_date_value', date('Y-m-dTH:i:s'), ">")
      ->condition('n.status', 1)
      ->execute();

    $nids_ok = array();
    $nids_error = array();
    foreach ($result as $node) {
      $subject = "Je reservering is een optie, bevestig of annuleer svp. / Your reservation is an option, please accept or cancel: " . $node->title;
      $body = array();
      $body[] = "Je reservering '" . $node->title . "' is als optie aangemaakt.";
      $body[] = "Om je reservering te wijzigen neem contact op met de facilitaire dienst.";
      $body[] = "Zie: " . $base_url . "/node/" . $node->nid . "/";
      $body[] = '';
      $body[] = "Your reservation '" . $node->title . "' is an option.";
      $body[] = "To modify/accept/cancel your registration please contact facilities.";
      $body[] = "See: " . $base_url . "/node/" . $node->nid . "/";

      if (!_isshagenda_compose_send_mail($node->mail, $subject, $body, false)) {
        $nids_error[] = $node->nid;
      } else {
        $nids_ok[] = $node->nid;
      }
    }

    watchdog('iish_agenda', ':scount reserveringsoptie(s), :scount herinnering(en) verstuurd. ( nodes :nids )', array(':scount' => count($nids_ok), ':nids' => implode(",", $nids_ok)), WATCHDOG_NOTICE);

    if (count($nids_error) > 0) {
      watchdog('iish_agenda', ':fcount herinnering(en) kon(den) niet wordem verstuurd. ( nodes :nids )', array(':fcount' => count($nids_error), ':nids' => implode(",", $nids_error)), WATCHDOG_ERROR);
    }
  }
}


function _iishagenda_change_if_private_title(&$result)
{

  if (_iishagenda_is_event_private($result->nid)) {
    global $user;
    $event = node_load($result->nid);
    if (is_user_admin() || $event->uid == $user->uid) {
      $result->node_title .= " (prive)";
    } else {
      $result->node_title = "vergadering";
    }
  }
}


function _iishagenda_change_node_title_if_private($nid, $title)
{

  if (_iishagenda_is_event_private($nid)) {
    global $user;
    $event = node_load($nid);
    if (is_user_admin() || $event->uid == $user->uid) {
      $title .= " (prive)";
    } else {
      $title = "vergadering";
    }
  }
  return $title;
}


/**
 * Implements hook_views_pre_view
 *
 * Overrides the default location with the one stored in session.
 */
function iishagenda_views_pre_view(&$view)
{
  if ($view->name === 'catering' || $view->name === 'catering_archive' || $view->name === 'calendar' || ($view->name === 'upcoming_events' && $view->current_display == 'page')) {
    $view_filters = $view->display_handler->get_option('filters');
    $location_id = _iishagenda_determine_location();
    $view_filters['tid']['value'][0] = $location_id;
    $overrides = array();
    $overrides['filters'] = $view_filters;
    foreach ($overrides as $option => $definition) {
      $view->display_handler->override_option($option, $definition);
    }
  }
}


/**
 * Returns the current location, sets the first location if none defined
 */
function _iishagenda_determine_location()
{
  // TODO: save and load preference to user profile.
  global $user;
  $user = user_load($user->uid);

  //only set location if user is authenticated
  if (key_exists(2, $user->roles)) {
    if (isset($_GET['location_id'])) {
      $_SESSION['location_id'] = intval($_GET['location_id']);
    }

    if (!isset($_SESSION['location_id'])) {
      $location_voc = taxonomy_vocabulary_machine_name_load('room_location');
      $terms = taxonomy_get_tree($location_voc->vid, 0, null, true);
      //set first location as default
      $_SESSION['location_id'] = $terms[0]->tid;
      //drupal_set_message("De locatie is ingesteld op: ".$terms[0]->name);
    }

    return $_SESSION['location_id'];
  }
}